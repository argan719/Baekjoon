// 12865번 - Knapsack 문제 DP이용

#include<iostream>
#define ROW 101
#define COLUMN 100001
using namespace std;

typedef struct p {
	int w;  // 물건의 무게
	int v;  // 물건의 가치
}Product;

int main(void) {
	int n, k;
	cin >> n >> k;

	Product p[ROW];  // 구조체 배열 생성
	int matrix[ROW][COLUMN];   // 2차원 배열 생성

	// N개의 물건에 대해 무게,가치 입력
	for (int i = 1; i <= n; i++) {
		cin >> p[i].w >> p[i].v;
	}

	// bottom-up과정. 행은 물건의 개수 (0~n) 열은 무게 (0~k)
	int tmp;
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= k; j++) {
			if (i == 0 || j == 0) matrix[i][j] = 0;   // 0행과 0열은 0으로 채움
			else {
				if (p[i].w > j) matrix[i][j] = matrix[i - 1][j];   // 현재 담으려는 물건의 무게가 열 값보다 크다면 왼쪽 값 그대로 가져옴
				else {  // 삼항연산자 이용
					(p[i].v + matrix[i - 1][j - p[i].w] < matrix[i - 1][j]) ? tmp = matrix[i - 1][j] : tmp = p[i].v + matrix[i - 1][j - p[i].w];
					matrix[i][j] = tmp;
				}  // 그렇지 않은 경우, i번째 보석값 + p[ i - 1 ,w - i ]  or  p[i - 1, w]   둘 중 큰 값으로 선택한다.
			}  // i번째 보석값 + p [ i-1, w-i] 가 의미하는 건 i번째 보석값의 무게를 뺀 열의 i - 1행임.
		  // 즉, i 번째 보석을 넣을 자리를 제외하고 (그 무게만큼 뺀 상태에서) 최적인 애를 갖다 쓰는 거임. 거기다가 i번째 무게 더해 줌.
		}  // p[i-1, w] 는 바로 위에 칸에 해당함. '그 전꺼에서의 최적값'이 더 크다면 위에 있는 값 그대로 가져오는 거임.
	}
	cout << matrix[n][k];    // 행렬의 맨 오른쪽 밑에 값이 최종 결과이므로 그대로 출력하면 답이 된다.
}