//  Kruskal 이용
#include<stdio.h>
#include<math.h>  // sqrt
#define MAX 110
#define MAX_D 500000
#define SWAP(x, y, t) ( t = x, x = y, y = t )


// 별
typedef struct {
	double x;  // 별의 x좌표값
	double y;  // 별의 y좌표값
	int idx;  // parent값 매칭 위해 별마다 인덱스 설정(0부터 시작) (for findParent, unionParent)
}Star;

// 별 사이 거리
typedef struct {
	Star a;  // 첫번째 노드
	Star b;  // 두번째 노드
	double val;  // 노드 간 거리
}Distance;

Star arr[MAX];   // 별 정보 저장 배열
Distance distance[MAX_D];  // 그래프
int parent[MAX];  // 연결성분 - 부모노드

int numberOfVertex;  // 노드 개수
int numberOfEdge;   // 간선 개수

void AddEdge(int i, Star e) {  // 별 정보 입력. 추가
	arr[i] = e;
}

int getParent(int x) {   // 부모 값 리턴
	if (parent[x] == x) return x;    // parent [x] = x 인 경우 루트노드를 의미
	return parent[x] = getParent(parent[x]);  // 재귀호출로 부모번호까지 타고 올라감
}

// 같은 부모노드를 가지는지 확인
int findParent(int a, int b) {    // 트리의 루트노드 찾기 - 값은 같이면 같은 집합. 1을 리턴한다.
	if (getParent(a) == getParent(b)) return 1;
	else return 0;
}

void unionParent(int a, int b) {  // 연결성분 생성
	a = getParent(a);  // a의 부모노드 값
	b = getParent(b);   // b의 부모노드 값
	if (a < b) parent[b] = a;  // 더 작은 쪽으로 몰아주기
	else parent[a] = b;
}


int main(void)
{
	int i, k, j;
	Distance tmp;
	Star e;
	// 별의 개수 입력
	scanf("%d", &numberOfVertex);
	numberOfEdge = 0;

	// parent 값 초기화 - 인덱스=값
	for (i = 1; i <= numberOfVertex; i++)
		parent[i] = i;
	
	// 별의 좌표 입력
	//printf("각 별의 좌표(x, y)\n");
	for (i = 0; i < numberOfVertex; i++) {
		scanf("%lf %lf", &e.x, &e.y);
		e.idx = i;
		AddEdge(i, e);
	}

	// 별 사이 거리 계산 후 저장
	int idx = 0;
	for (i = 0; i < numberOfVertex - 1; i++) {
		for (j = i + 1; j < numberOfVertex; j++) {
			distance[idx].a = arr[i];  // 첫 번째 노드
			distance[idx].b = arr[j];  // 두 번째 노드
			// 노드 간 거리 : sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
			distance[idx].val = sqrt((arr[i].x - arr[j].x) * (arr[i].x - arr[j].x) + (arr[i].y - arr[j].y) * (arr[i].y - arr[j].y));
			idx++;
			numberOfEdge++;
		}
	}

	// 별 사이 거리 오름차순으로 정렬 (bubble sort)
	Distance t;
	for (i = 0; i<numberOfEdge; i++) {
		for (j = 0; j < numberOfEdge-i-1; j++) {
			if (distance[j].val > distance[j + 1].val) SWAP(distance[j], distance[j + 1], t);
		}
	}

	// greedy 
	// 그래프의 모든 간선을 가중치로 오름차순으로 정렬한뒤
	// 낮은 간선부터 하나씩 그래프에 추가해나간다.
	// 단 사이클을 형성하는 간선은 추가하지 않고 간선의 수가 정점의 수보다 하나 적을 때 최소 신장 트리가 완성된다.
	double sum = 0;
	for (i = 0; i < numberOfEdge; i++)
	{
		// 사이클이 발생하지 않을 때만 선택
		// 같은 부모인 경우 union연산을 수행하면 사이클이 형성된다.
		// 따라서 부모가 다른 노드일 경우에만 union연산을 수행한다.
		if (!findParent(distance[i].a.idx, distance[i].b.idx))   // i랑 i+1이 아니라 Star a, Star b 비교
		{
			unionParent(distance[i].a.idx, distance[i].b.idx);
			sum += distance[i].val;
		}
	}
    printf("%.2f", sum);
	//printf("\n\n별자리를 만드는 최소 비용 : %.2f\n\n", sum);  // 최단거리 간선 가중치의 합
}